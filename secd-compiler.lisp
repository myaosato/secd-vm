(uiop/package:define-package :secd-vm/secd-compiler (:nicknames) (:use :cl)
                             (:shadow) (:export :compile-to-secd) (:intern))
(in-package :secd-vm/secd-compiler)
;;don't edit above

(defun compile-args (args n)
  (if (/= (length args) n)
      (error "~A arguments expexted but given ~A" n (length args))
      (loop for ind from 0 to (1- n)
            append (compile-to-secd (nth ind args) nil))))

(defun compile-to-secd (in code)
  (if (atom in)
      (cond ((integerp in)
             (cons :ldc (cons in code)))
            ((symbolp in)
             (cons :ldc (cons in code)))
            (t (error "~A is a not support type value" in))) ;; TODO
      (let ((op (car in))
            (args (cdr in)))
        (cond ((eq op 'cons)
               (append (compile-args args 2)
                       (cons :cons code)))
              ((eq op 'car)
               (append (compile-args args 1)
                       (cons :car code)))
              ((eq op 'cdr)
               (append (compile-args args 1)
                       (cons :cdr code)))
              ((eq op 'eq)
               (append (compile-args args 2)
                       (cons :eq code)))
              ((eq op '+)
               (append (compile-args args 2)
                       (cons :add code)))
              ((eq op '-)
               (append (compile-args args 2)
                       (cons :sub code)))
              ((eq op '<)
               (append (compile-args args 2)
                       (cons :less code)))
              ((eq op '>)
               (append (compile-args (reverse args) 2)
                       (cons :less code)))
              ((eq op 'atom)
               (append (compile-args (reverse args) 1)
                       (cons :atom code)))
              ((eq op 'integerp)
               (append (compile-args (reverse args) 1)
                       (cons :integerp code)))
              ((eq op 'symbolp)
               (append (compile-args (reverse args) 1)
                       (cons :symbolp code)))
              (t (error "~A is a not support type operator" op))
              ))))